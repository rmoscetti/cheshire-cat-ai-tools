# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/rerun-evaluation.ipynb.

# %% auto 0
__all__ = ['weave_client', 'calls_query', 'parse_calls', 'get_dataset', 'get_missing_df', 'run_missing']

# %% ../nbs/rerun-evaluation.ipynb 2
from .eval import similarity_scorer, conf_variants, prepare_declarative_memory, CatModel
import weave
import pandas as pd
from tqdm.auto import tqdm
import polars as pl
from polars import col as c
from .client import SuperCatClient
from datetime import datetime

# %% ../nbs/rerun-evaluation.ipynb 3
weave_client = weave.init("smart-drying-unitus/declarative-eval")

# %% ../nbs/rerun-evaluation.ipynb 4
calls_query={"$expr":{"$and":[{"$gt":[{"$getField":"started_at"},{"$literal":1756801780.338}]},{"$or":[{"$eq":[{"$getField":"id"},{"$literal":"019927e9-0d45-7a20-a70c-ad6886ffdb46"}]},{"$eq":[{"$getField":"id"},{"$literal":"019926be-3e2c-7041-9927-26b76aa3fdb9"}]},{"$eq":[{"$getField":"id"},{"$literal":"019925fa-39ee-7f57-b923-eb9cdb36c1e6"}]},{"$eq":[{"$getField":"id"},{"$literal":"0199175a-03ae-7809-8292-f22c2320f1ee"}]},{"$eq":[{"$getField":"id"},{"$literal":"01990fbd-ae07-74cc-9b8e-9e5ae323d958"}]},{"$eq":[{"$getField":"id"},{"$literal":"019910d8-995a-78ed-8151-afbd5a5e4223"}]},{"$eq":[{"$getField":"id"},{"$literal":"0199115d-6ac3-7422-815a-c2b56b7decae"}]},{"$eq":[{"$getField":"id"},{"$literal":"01991448-bdfd-762d-ab6c-c4851521d521"}]},{"$eq":[{"$getField":"id"},{"$literal":"01991061-7220-7a2a-aa03-a14bd6c8a003"}]}]}]}}

# %% ../nbs/rerun-evaluation.ipynb 5
def parse_calls(calls):
    outs = []
    for call in tqdm(list(calls)):
        model_name = call.inputs['model'].name
        has_mem =  'NO memory' not in call.display_name
        for row in call.children():
            out = {}
            if inp := row.inputs.unwrap():
                if inp := inp.get('example', False):
                        out['question_id']= inp['id']
                        out['question']= inp['prompt']
                        out['expected_answer']= inp['target']
            if output := row.output:
                output = output.unwrap()
                if 'output' in output:
                    if 'text_clean' in output['output']:
                        out['model_answer'] = output['output']['text_clean']
                    if 'scores' in output:
                        if 'CatEmbeddingSimilarityScorer' in output['scores']:
                            out['similarity_score'] = output['scores']['CatEmbeddingSimilarityScorer']['similarity_score']

            out['model_name'] = model_name
            out['weave_call'] = row
            out['has_declarative_memory'] = has_mem
            outs.append(out)
    return pd.DataFrame(outs)

# %% ../nbs/rerun-evaluation.ipynb 16
def get_dataset(missing):
    datasets = []
    for row in missing.iter_rows(named=True):
        dataset = []
        for id, q, t in zip(row['id'], row['question'], row['target']):
            if id is None:
                continue
            dataset.append({
                'id': id,
                'prompt': q,
                'input': q,
                'target': t
            })
        datasets.append(dataset)
    return datasets

# %% ../nbs/rerun-evaluation.ipynb 18
def get_missing_df(weave_client, query = calls_query):
    calls = list(weave_client.get_calls(
        filter={"trace_roots_only": True},
        query=query,
        sort_by=[{"field":"started_at","direction":"desc"}],
    ))
    df = parse_calls(calls)
    df_pl = pl.from_pandas(df.drop(columns=['weave_call']))
    missing = df_pl.filter(c.model_answer.is_null()).group_by(c.model_name, c.has_declarative_memory).agg(question = c.question, target = c.expected_answer, id = c.question_id.cast(pl.Int64), n = pl.len()).sort(c.has_declarative_memory)
    missing = missing.with_columns(dataset = pl.Series(get_dataset(missing), dtype=pl.Object))
    return missing

# %% ../nbs/rerun-evaluation.ipynb 19
async def run_missing(missing):
    client = SuperCatClient()
    time = datetime.now().strftime("%m-%d %H:%M")
    eval_name = f"{time} Eval"
    cat_has_memory = False
    for row in missing.iter_rows(named=True):
        dataset = row['dataset']
        model_name = row['model_name']
        has_mem = row['has_declarative_memory']
        if cat_has_memory != has_mem:
            if has_mem:
                print("Preparing declarative memory...")
                prepare_declarative_memory(client)
            else:
                client.wipe_declarative_memory()
            cat_has_memory = has_mem
        print(f"Running {model_name} with memory={has_mem} on {len(dataset)} examples")
        model = CatModel(model_name, conf_variants[model_name], has_declarative_memory=has_mem)
        evaluation = weave.Evaluation(
            dataset=dataset,
            scorers=[similarity_scorer],
            name=eval_name,
        )
        await evaluation.evaluate(
            model, __weave={"display_name": f"{eval_name} - {model_name} {'memory' if has_mem else 'NO memory'}"}
        )
